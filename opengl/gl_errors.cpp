#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-function"
static void print_error_glGetProgramBinary(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_OPERATION:
			printf("is generated if bufSize is less than the size of GL_PROGRAM_BINARY_LENGTH for program.\n");
			printf("is generated if GL_LINK_STATUS for the program object is false.\n");
			break;
		default: printf("UNKNONW ERROR!"); break;
	}
}

static void print_error_glCreateShader(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_ENUM: printf("is generated if shaderType is not an accepted value.\n"); break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glShaderSource(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_OPERATION: printf("is generated if shader is not a shader object.\n"); break;
		case GL_INVALID_VALUE:
			printf("is generated if shader is not a value generated by OpenGL.\n");
			printf("is generated if count is less than 0.\n");
			break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glCompileShader(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_VALUE: printf("is generated if shader is not a value generated by OpenGL.\n"); break;
		case GL_INVALID_OPERATION: printf("is generated if shader is not a shader object.\n"); break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glGetShaderInfoLog(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_OPERATION: printf("is generated if shader is not a shader object.\n"); break;
		case GL_INVALID_VALUE:
			printf("is generated if shader is not a value generated by OpenGL.\n");
			printf("is generated if maxLength is less than 0.\n");
			break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glCreateProgram(GLenum errcode) {
	switch (errcode) {
	}
}

static void print_error_glAttachShader(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_VALUE: printf("is generated if either program or shader is not a value generated by OpenGL.\n"); break;
		case GL_INVALID_OPERATION:
			printf("is generated if program is not a program object.\n");
			printf("is generated if shader is not a shader object.\n");
			printf("is generated if shader is already attached to program.\n");
			break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glProgramParameteri(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_OPERATION: printf("is generated if program is not the name of an existing program object.\n"); break;
		case GL_INVALID_ENUM: printf("is generated if pname is not one of the accepted values.\n"); break;
		case GL_INVALID_VALUE: printf("is generated if value is not a valid value for the parameter named by pname.\n"); break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glLinkProgram(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_VALUE: printf("is generated if program is not a value generated by OpenGL.\n"); break;
		case GL_INVALID_OPERATION:
			printf("is generated if program is not a program object.\n");
			printf("is generated if program is the currently active program object and transform feedback mode is active.\n");
			break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glGetProgramiv(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_VALUE: printf("is generated if program is not a value generated by OpenGL.\n"); break;
		case GL_INVALID_ENUM: printf("is generated if pname is not an accepted value.\n"); break;
		case GL_INVALID_OPERATION:
			printf("is generated if program does not refer to a program object.\n");
			printf("is generated if pname is GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, or GL_GEOMETRY_OUTPUT_TYPE, and program does not contain a geometry shader.\n");
			printf("is generated if pname is GL_COMPUTE_WORK_GROUP_SIZE and program does not contain a binary for the compute shader stage.\n");
			break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glGetProgramInfoLog(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_OPERATION: printf("is generated if program is not a program object.\n"); break;
		case GL_INVALID_VALUE:
			printf("is generated if program is not a value generated by OpenGL.\n");
			printf("is generated if maxLength is less than 0.\n");
			break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}

static void print_error_glValidateProgram(GLenum errcode) {
	switch (errcode) {
		case GL_INVALID_VALUE: printf("is generated if program is not a value generated by OpenGL.\n"); break;
		case GL_INVALID_OPERATION: printf("is generated if program is not a program object.\n"); break;
		default: printf("UNKNONW ERROR!\n"); break;
	}
}
#pragma clang diagnostic pop

#ifdef GL_ERROR_CHECKING
#define GL_CHECK_ERROR(id) { GLenum errcode = glGetError(); if (errcode != GL_NO_ERROR) { printf("gl error [%s]: %d (%s:%d)\n", #id, errcode, __FILE__, __LINE__); print_error_##id(errcode); } }
#define GL_CHECK_ERROR_RETVAL(id, retval) { if (retval == 0) { printf("gl retval error [%s]: (%s:%d)\n", #id, __FILE__, __LINE__); print_error_##id(glGetError()); } }
#else
#define GL_CHECK_ERROR(id)
#define GL_CHECK_ERROR_RETVAL(id, retval)
#endif

